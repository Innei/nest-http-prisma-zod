// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "nestjs-zod-prisma"
  output   = "../src/schemas" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  generateDto = true // (default) Generate DTOs for NestJS

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  dtoCase = "PascalCase" // (default) Output DTOs using pascal case (ex. UserDto, PostDto)
  // dtoCase             = "camelCase" // Output DTOs using camel case (ex. userDto, postDto)

  dtoSuffix = "Dto" // (default) Suffix to apply to your prisma models when naming DTOs

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default("")
  username      String     @unique
  name          String
  introduce     String?
  avatar        String?
  password      String
  mail          String?
  url           String?
  lastLoginTime DateTime?
  lastLoginIp   String?
  socialIds     Json?      @default("{}")
  authCode      String
  apiTokens     ApiToken[]
  oauths        OAuth[]
  Post          Post[]
  created       DateTime   @default(now()) @map("created_at")
  modified      DateTime?  @updatedAt @map("updated_at")
}

model ApiToken {
  id      String    @id @default("")
  userId  String
  created DateTime  @default(now())
  token   String
  expired DateTime?
  name    String    @unique
  user    User      @relation(fields: [userId], references: [id])
}

model OAuth {
  id       String @id @default("")
  userId   String
  platform String
  oauthId  String
  user     User   @relation(fields: [userId], references: [id])
}

model Post {
  id       String    @id @default("")
  slug     String    @unique
  text     String
  title    String
  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
  // Fields from BaseModel
  // created  DateTime @default(now())  // This is same as createdAt
  // Adding id here would be redundant since Prisma auto-generates it
  User     User?     @relation(fields: [userId], references: [id])
  userId   String?

  @@index([slug])
  @@index([created])
}
